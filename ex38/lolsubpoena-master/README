lolsubpoena is a basic command line twitter client for sending and receiving AES256 encrypted direct messages. it also includes a key generator for creating public/private encryption key pairs. the key exchange is diffie-hellman, so feel free to swap public keys with your friends over a compromised transport, such as gmail.

tutorial:

let's say we have two users who want to communicate privately using twitter: @alicebelieber92 and @bobgagalover94. they're just as insufferable as their twitter usernames suggest.

- alice and bob both download lolsubpoena, and get their twitter oauth stuff sorted out
- alice generates her public key file:
  - python keygen.py --public alicebelieber92
- bob generates his and they trade screenname.public files
- with the .public files swapped, they both generate their shared private key:
	- alice: python keygen.py --private bobgagalover94.public alicebelieber92.secret
	- bob: python keygen.py --private alicebelieber92.public bobgagalover94.secret
- on first use, they authorize the app for their twitter accounts, following the on-screen instructions:
	- python lolsubpoena.py --get-token alicebelieber92
- now they can begin communicating. bob sends alice a message:
	- python lolsubpoena.py --send-msg alicebelieber92
	- "hey alice, isn't it great that twitter can't even read our DMs now?"
- alice gets the message as normal (but unreadable) via twitter and she fires up lolsubpoena to read it:
	- python lolsubpoena.py --list-msg bobgagalover94
- they can continue messaging for as long as they want with the current key. when they start getting paranoid, they can regenerate it by deleting their .public, .private and .secret files; then following the keygen.py instructions above again. this has the obvious side effect that messages sent using the previous key will now be unreadable.

dependencies:

- python 2.6
- you need to bring your own twitter oauth consumer key/secret (sorry)
	- get it at http://dev.twitter.com/apps/new
	- store it in a file called application.oauth. key on the first line, secret on the second
- python-oauth2 (which in turn depends on httplib2)
- pycrypto

disclaimer:

this was a jokey weekend project and i make no guarantees about the security. please don't depend on this if you're a political dissident or whatever. also, my python sucks. try and deal with it.
